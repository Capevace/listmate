datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id    String @id @default(uuid())
    name  String
    email String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    password    Password?
    SourceToken SourceToken[]
}

model Password {
    hash String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String @unique
}

model Session {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    expiresAt DateTime?
    data      String // JSON
}

model SourceToken {
    id     String @id @default(uuid())
    api    String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String

    expiresAt DateTime?
    data      String? // JSON

    @@unique([api, userId])
}

model DataObject {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    type        String // song, video, file 
    isFavourite Boolean @default(false)

    thumbnail       FileReference? @relation(fields: [thumbnailFileId], references: [id], onDelete: SetNull)
    thumbnailFileId String?

    values          DataObjectValue[]  @relation("DataObjectValues")
    remotes         DataObjectRemote[]
    references      DataObjectValue[]  @relation("ValueReferences")
    arrayReferences ValueArrayItem[]   @relation("ValueArrayReferences")

    @@index([type])
    @@index([isFavourite])
    @@index([type, isFavourite])
}

model DataObjectRemote {
    id           String     @unique @default(uuid())
    dataObject   DataObject @relation(fields: [dataObjectId], references: [id], onDelete: Cascade)
    dataObjectId String
    api          String // youtube, spotify, local
    uri          String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([api, uri])
    @@unique([dataObjectId, api])
}

model DataObjectValue {
    dataObject   DataObject @relation("DataObjectValues", fields: [dataObjectId], references: [id], onDelete: Cascade)
    dataObjectId String
    key          String
    type         String     @default("text") // TEXT, NUMBER, RESOURCE

    value             String
    valueDataObject   DataObject? @relation("ValueReferences", fields: [valueDataObjectId], references: [id], onDelete: SetNull)
    valueDataObjectId String?

    isArray Boolean          @default(false)
    items   ValueArrayItem[]

    @@id([dataObjectId, key])
    @@index([key])
}

model ValueArrayItem {
    parentValue        DataObjectValue @relation(fields: [parentDataObjectId, parentKey], references: [dataObjectId, key], onDelete: Cascade)
    parentDataObjectId String
    parentKey          String
    position           Int

    value             String
    valueDataObject   DataObject? @relation("ValueArrayReferences", fields: [valueDataObjectId], references: [id], onDelete: SetNull)
    valueDataObjectId String?

    @@id([parentDataObjectId, parentKey, position])
    @@index([parentDataObjectId, parentKey])
}

model FileReference {
    id        String   @id @default(uuid())
    mimeType  String
    createdAt DateTime @default(now())

    thumbnailReferences DataObject[]
}
