datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id    String @id @default(uuid())
    name  String
    email String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    password    Password?
    List        List[]
    SourceToken SourceToken[]
}

model Password {
    hash String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String @unique
}

model Session {
    id        String    @id @default(uuid())
    createdAt DateTime  @default(now())
    expiresAt DateTime?
    data      String // JSON
}

model SourceToken {
    id     String @id @default(uuid())
    api    String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String

    expiresAt DateTime?
    data      String? // JSON

    @@unique([api, userId])
}

// model Source {
//     id          String         @id @default(uuid())
//     name        String
//     type        String // spotify, youtube
//     description String?
//     lists       TagsOnLists[]
//     faucets     SourceFaucet[]
// }

// model SourceFaucet {
//     id   String @id @default(uuid())
//     name String
//     type String // spotify:playlist, youtube:playlist, youtube:channel

//     Source   Source? @relation(fields: [sourceId], references: [id])
//     sourceId String?
// }

// model Tag {
//     name          String            @id
//     description   String?
//     createdByUser Boolean           @default(true)
//     lists         TagsOnLists[]
//     items         TagsOnListItems[]
// }

// model TagsOnLists {
//     list    List   @relation(fields: [listId], references: [id])
//     listId  String
//     tag     Tag    @relation(fields: [tagName], references: [name])
//     tagName String

//     assignedAt DateTime @default(now())

//     Source   Source? @relation(fields: [sourceId], references: [id])
//     sourceId String?
//     @@id([listId, tagName])
// }

// model Media {
//     id        String   @id @default(uuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model DataObject {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    type        String // song, video, file 
    isFavourite Boolean @default(false)

    thumbnail       FileReference? @relation(fields: [thumbnailFileId], references: [id])
    thumbnailFileId String?

    values     DataObjectValue[]  @relation("DataObjectValues")
    remotes    DataObjectRemote[]
    references DataObjectValue[]  @relation("DataObjectReferences")
    placements ListItem[]
}

model DataObjectRemote {
    id           String     @unique @default(uuid())
    dataObject   DataObject @relation(fields: [dataObjectId], references: [id], onDelete: Cascade)
    dataObjectId String
    api          String // youtube, spotify, local
    uri          String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([api, uri])
    @@unique([dataObjectId, api])
}

model DataObjectValue {
    // api       String // youtube, spotify, local
    // uri String
    dataObject   DataObject @relation("DataObjectValues", fields: [dataObjectId], references: [id], onDelete: Cascade)
    dataObjectId String
    key          String

    value             String
    valueDataObject   DataObject? @relation("DataObjectReferences", fields: [valueDataObjectId], references: [id], onDelete: Cascade)
    valueDataObjectId String?

    @@id([dataObjectId, key])
}

model FileReference {
    id        String   @id @default(uuid())
    mimeType  String
    createdAt DateTime @default(now())

    coverReferences List[] @relation("FileCoverReferences")

    thumbnailReferences DataObject[]
}

model List {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String?

    title                String
    description          String?
    cover                FileReference? @relation("FileCoverReferences", fields: [coverFileReferenceId], references: [id])
    coverFileReferenceId String?

    items ListItem[]
}

model ListItem {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    position Int

    list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId String

    dataObject   DataObject @relation(fields: [dataObjectId], references: [id], onDelete: Cascade)
    dataObjectId String
}

// model TagsOnListItems {
//     listItem   ListItem @relation(fields: [listItemId], references: [id])
//     listItemId String

//     tag     Tag    @relation(fields: [tagName], references: [name])
//     tagName String

//     assignedAt DateTime @default(now())

//     @@id([listItemId, tagName])
// }

// model ListItemsOnLists {
//     list   List   @relation(fields: [listId], references: [id])
//     listId String

//     listItem   ListItem @relation(fields: [listItemId], references: [id])
//     listItemId String

//     assignedAt DateTime @default(now())

//     @@id([listId, listItemId])
// }
