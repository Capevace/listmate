datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id    String @id @default(uuid())
    name  String
    email String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    password Password?
    List     List[]
}

model Password {
    hash String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String @unique
}

model List {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    title       String
    description String?

    tags  TagsOnLists[]
    items ListItemsOnLists[]
}

model Source {
    id          String         @id @default(uuid())
    name        String
    type        String // spotify, youtube
    description String?
    lists       TagsOnLists[]
    faucets     SourceFaucet[]
}

model SourceFaucet {
    id   String @id @default(uuid())
    name String
    type String // spotify:playlist, youtube:playlist, youtube:channel

    Source   Source? @relation(fields: [sourceId], references: [id])
    sourceId String?
}

model Tag {
    name          String            @id
    description   String?
    createdByUser Boolean           @default(true)
    lists         TagsOnLists[]
    items         TagsOnListItems[]
}

model TagsOnLists {
    list    List   @relation(fields: [listId], references: [id])
    listId  String
    tag     Tag    @relation(fields: [tagName], references: [name])
    tagName String

    assignedAt DateTime @default(now())

    Source   Source? @relation(fields: [sourceId], references: [id])
    sourceId String?
    @@id([listId, tagName])
}

model Media {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt


}

model ListItem {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title String
    type  String // song, video, file



    remotes ListItemRemote[]
    tags    TagsOnListItems[]

    lists ListItemsOnLists[]
}

model ListItemRemote {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    type     String // local:bookmark spotify:song, youtube:video
    remoteId String

    information String // JSON

    main       ListItem @relation(fields: [mainItemId], references: [id])
    mainItemId String
}

model TagsOnListItems {
    listItem   ListItem @relation(fields: [listItemId], references: [id])
    listItemId String

    tag     Tag    @relation(fields: [tagName], references: [name])
    tagName String

    assignedAt DateTime @default(now())

    @@id([listItemId, tagName])
}

model ListItemsOnLists {
    list   List   @relation(fields: [listId], references: [id])
    listId String

    listItem   ListItem @relation(fields: [listItemId], references: [id])
    listItemId String

    assignedAt DateTime @default(now())

    @@id([listId, listItemId])
}
